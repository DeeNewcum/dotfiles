#!/usr/bin/env perl

# Produce ASCII bar graphs at the command line.

# A simplified version of:
#       http://search.cpan.org/dist/Text-Graph/Graph.pm
#       http://jehiah.cz/a/ascii-bar-charts


# Usage:
# 
# Pipe a series of strings into bargraph.  Bargraph will count up how often it sees each string, and
# will draw that string on the left, and a bar after it that represents the number of times the
# string was seen.
#
# The output is sorted by the string.  If you want to sort by frequency instead, simply pipe the
# output of 'bargraph' through 'sort -n'.



# Examples:
#       last | cut -d \  -f 1 | bargraph | sort -n
#       last | perl -nle '/(\d\d:\d)\d/ && print "${1}0"' | bargraph

    use strict;
    use warnings;
    
    use List::Util qw[min max];
    use utf8;

    use Data::Dumper;
    #use Devel::Comments;           # uncomment this during development to enable the ### debugging statements


binmode STDOUT, ":utf8";

# call via a symlink named "bargraphu" to use Unicode output
my $char = ($0 =~ /bargraphu$/) ? 'â–ˆ' : '*';

my %count;

while (<>) {
    chomp;
    $count{$_}++;
}

my $min = min(values(%count));
my $max = max(values(%count));
my $longest_key_string = max(map {length} keys %count);
my $longest_value_string = max(map {length(sprintf "%d", $_)} values %count);

my $max_bar_len = 80;
my $divisor = ($max - $min + 1);

my @key_order = sort {&natural_sort} keys %count;
foreach my $key (@key_order) {
    printf "%${longest_value_string}d  %-${longest_key_string}s  %s\n",
                $count{$key},
                $key,
                $char x (1 + ($max_bar_len * ($count{$key} - $min) / $divisor));
}



# Thanks to http://www.perlmonks.org/?node_id=68185
sub natural_sort {
  my @a = split /(\d+)/, $a;
  my @b = split /(\d+)/, $b;
  my $M = @a > @b ? @a : @b;
  my $res = 0;
  for (my $i = 0; $i < $M; $i++) {
    return -1 if ! defined $a[$i];
    return 1 if  ! defined $b[$i];
    if ($a[$i] =~ /\d/) {
      $res = $a[$i] <=> $b[$i];
    } else {
      $res = $a[$i] cmp $b[$i];
    }
    last if $res;
  }
  $res;
}
