#!/usr/bin/env perl

# Produce ASCII bar graphs at the command line.

# A simplified version of:
#       http://search.cpan.org/dist/Text-Graph/Graph.pm
#       http://jehiah.cz/a/ascii-bar-charts


# Usage:
# 
# Pipe a series of strings into bargraph.  Bargraph will count up how often it sees each string, and
# will draw that string on the left, and a bar after it that represents the number of times the
# string was seen.
#
# The output is sorted by the string.  If you want to sort by frequency instead, simply pipe the
# output of 'bargraph' through 'sort -n'.



# Examples:
#       last | cut -d \  -f 1 | bargraph | sort -n
#       last | perl -nle '/(\d\d:\d)\d/ && print "${1}0"' | bargraph

    use strict;
    use warnings;
    
    use List::Util qw[min max];
    use utf8;

    use Data::Dumper;
    #use Devel::Comments;           # uncomment this during development to enable the ### debugging statements


binmode STDOUT, ":utf8";

# call via a symlink named "bargraphu" to use Unicode output
my $char = ($0 =~ /bargraphu$/) ? 'â–ˆ' : '*';

my %count;

while (<>) {
    chomp;
    $count{$_}++;
}

my $min = min(values(%count));
my $max = max(values(%count));
my $longest_key_string = max(map {length} keys %count);
my $longest_value_string = max(map {length(sprintf "%d", $_)} values %count);

my $max_bar_len = 80;
my $divisor = ($max - $min + 1);

my @key_order = sort {&natural_sort} keys %count;
foreach my $key (@key_order) {
    printf "%${longest_value_string}d  %-${longest_key_string}s  %s\n",
                $count{$key},
                $key,
                $char x (1 + ($max_bar_len * ($count{$key} - $min) / $divisor));
}



# Thanks to http://www.perlmonks.org/?node_id=68185
sub natural_sort {
  my @a = split /(\d+)/, $a;
  my @b = split /(\d+)/, $b;
  my $M = @a > @b ? @a : @b;
  my $res = 0;
  for (my $i = 0; $i < $M; $i++) {
    return -1 if ! defined $a[$i];
    return 1 if  ! defined $b[$i];
    if ($a[$i] =~ /\d/) {
      $res = $a[$i] <=> $b[$i];
    } else {
      $res = $a[$i] cmp $b[$i];
    }
    last if $res;
  }
  $res;
}


__END__


# Print out a timestamp in a format that's useful for ingesting by 'bargraph' / 'bargraphchar'.
#
# This will truncate the time to the desired $level, which should be
#   "seconds", "minutes", "hourly", "daily", "weekly", "monthly", or "yearly"
#
# $gmlocal means "1" for gmtime, "0" for localtime
    use POSIX qw[strftime];
    use Time::Local;
sub bargraph_time {
    my ($timestamp, $level, $gmlocal) = @_;
    my $strftime = '';      # the strftime(3) format to use

    my $truncate_to = 0;    # in seconds
    my $relative_to = 0;
    my $zero_out = 0;
    
    # forward and reverse code-refs
    my $for = sub { $gmlocal ? gmtime(shift) : localtime(shift) };
    my $rev = $gmlocal ? \&Time::Local::timegm : \&Time::Local::timelocal;

    my @ts = &$for($timestamp);
    my $BOY    = &$rev(0, 0, 0, 1, 0, $ts[5]);             # beginning of year
    my $BOD    = $rev->(0, 0, 0, $ts[3], $ts[4], $ts[5]);   # beginning of the day
    my $BOYsun = ((7 - ($for->($BOY))[6]) % 7) * (60 * 60 * 24) + $BOY;      # the first sunday of the year

    if ($level eq 'yearly') {
        $strftime = '%Y';
    } elsif ($level eq 'monthly') {
        $strftime = '%Y-%m';
    } elsif ($level eq 'weekly') {
        $strftime = '%Y-%m-%d';
        $truncate_to = 60 * 60 * 24 * 7;
        $relative_to = $BOYsun;
    } elsif ($level eq 'daily') {
        $strftime = '%Y-%m-%d';
    } elsif ($level eq 'hourly') {
        $strftime = '%Y-%m-%d %H:00';
    } elsif ($level eq 'minutes') {
        $strftime = '%Y-%m-%d %H:%M';
    } elsif ($level eq 'seconds') {
        $strftime = '%Y-%m-%d %H:%M:%S';
    }

    if ($truncate_to > 0) {
        $timestamp = $relative_to + $truncate_to * int(($timestamp - $relative_to) / $truncate_to);
    }
    return POSIX::strftime($strftime, $gmlocal ? gmtime($timestamp) : localtime($timestamp));
}


