#!/usr/bin/env perl

# Does the same thing as 'xxd -r', but tries to do some extra text-massaging to
# allow it to ingest hex dumps from other tools as well.


# This doesn't bend over backwards though.  Some assumptions it makes:
#   - the address is at the beginning of the line, and is in hex
#   - there are 16 bytes of data per row

    use strict;
    use warnings;

    use File::Temp;
    use Data::Dumper;
    #use Devel::Comments;           # uncomment this during development to enable the ### debugging statements


my ($infile) = shift @ARGV;

-e $infile or die "File not found: $infile\n";

my ($fh_fixed, $filename_fixed) = File::Temp::tempfile();

open my $fin, '<', $infile      or die "$!";
while (<$fin>) {
    if (/^\s*([a-f0-9]+)[^a-z0-9]+((?:[a-f0-9]{2}[^a-z0-9]*){16})/i) {
        my ($addr, $data) = ($1, $2);
        $data =~ s/[^a-f0-9]+//ig;
        print $fh_fixed "$addr: ", join(" ",   unpack("(a4)*", $data)), "\n";
    }
}
close $fh_fixed;
close $fin;

#system "cat", $filename_fixed; exit;       # uncomment this to debug the intermediary file
system "xxd", "-r", $filename_fixed, @ARGV;

unlink $filename_fixed;
