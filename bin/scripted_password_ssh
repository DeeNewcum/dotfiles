#!/usr/bin/perl

# This is a small wrapper around SSH.  Call with the exact same command-line parameters as SSH itself.
# Put the password in $SSH_PASSWORD, and this program will use it to establish the connection.
#
# This has been tested on factory installs of Linux/Solaris/AIX.  It doesn't require Expect.
# It does require the OpenSSH client on the local machine, but that's available almost everywhere.
#
# NOTE: HARD-CODING PASSWORDS IN SCRIPTS is terribly insecure. You *really* should use SSH keys instead.  
#       This program shouldn't be used unless there's no other option.
#                   https://library.linode.com/security/ssh-keys
#                   https://help.ubuntu.com/community/SSH/OpenSSH/Keys
#
# (for background on how this program works, see http://google.com/search?q=SSH_ASKPASS+script )

    use strict;
    use warnings;

# this must be called right away
wasIcalledviaSSH_ASKPASS();



if (!$ENV{SSH_PASSWORD}) {
    die "\$SSH_PASSWORD must be set\n";
}

ssh_with_password($ENV{SSH_PASSWORD}, @ARGV);



## Paste these two functions into a Perl script, and you can use this functionality directly within Perl.
use POSIX;
sub ssh_with_password {
    my ($password, @ssh_commandline) = @_;

    $ENV{DISPLAY} ||= "none";       # if $DISPLAY isn't set, then set it to something arbitrary
    $ENV{SSH_ASKPASS} = $0;
    $ENV{SSH_PASSWORD} = $password;

    defined(my $pid = fork) or die "Unable to fork: $!";
    if ($pid == 0) {
        # diassociate from the terminal, otherwise SSH will insist on reading the password from the terminal
        POSIX::setsid();

        if ($ssh_commandline[0] !~ /^(?:sftp|scp)$/) {
            unshift @ssh_commandline, "ssh";        # default to ssh, unless "scp" or "sftp" is specified as the first argument
        }
        exec  { $ssh_commandline[0] } @ssh_commandline;
        exit 1;
    }
    waitpid($pid, 0);
}
# This should be called at the VERY START of your script.  It checks if we were called from SSH,
# and if so, it returns the SSH password.
sub wasIcalledviaSSH_ASKPASS {
    if (exists $ENV{SSH_ASKPASS} && @ARGV == 1 && !-t STDOUT) {
        print "$ENV{SSH_PASSWORD}\n";
        exit;
    }
}
