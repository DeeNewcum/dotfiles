#!/usr/bin/perl

# This is a wrapper script for `xdotool type'.  It injects text into the keyboard buffer.
#
#
# Put '#!/usr/bin/env typeme' at the top of a text file and chmod +x it.  Then, when you run that
# file, it will inject the text contents of the file to the keyboard.
#
# Now, set your window manager's hotkey system to run ~/.paste1 in response to Ctrl+F1,
# run ~/.paste2 in response to Ctrl+F2, etc.
# 
#
# The reason for a semi-complicated script, compared to something like:
#       xdotool type "$(cat ~/.paste1)"
# is that simpler alternatives strip newlines from the file.  This script leaves everything intact,
# giving the user the final decision about including newlines.


    use strict;
    use warnings;

    use Data::Dumper;
    #use Devel::Comments;           # uncomment this during development to enable the ### debugging statements


my $string = do {local $/=undef; <>};

# skip the she-bang, if present
$string =~ s/^#![^\x0d\x0a]*(?:\x0d\x0a|\x0d|\x0a)//s;

# parse out <<pause ...>> tags
my @tokens = split /(<<pause[^>]*>>)/, $string;
foreach my $token (@tokens) {
    if ($token =~ /^<<pause(?:\s+([^>]*))?>>$/) {
        cmd_pause($1);
    } else {
        system qw[xdotool type --clearmodifiers --delay 0], $token;
    }
}


# Pauses for a number of seconds, which can be fractional.
# Defaults to 2.0, if no argument is given.
sub cmd_pause {
    my ($length) = @_;
    $length = 2.0      unless defined($length);
    select(undef, undef, undef, $length);
}
