#!/usr/bin/env perl

        # Copyright 2012, Dee Newcum.  License: GPL v3.

# Pass this a filename/directory, and this will return the equivalent URL for that file.
#
# This relies on a file named '.url' located somewhere in the directory structure above the
# specified file, that indicates what that specific directory=>URL mapping is.  (see example below)
#
# It's true that there are MANY things that can make it complex to figure out what URL a specific
# phyical file is actually served at (eg. Apache mod_rewrite, web framework routes, ...).  However,
# it's hoped that these manually-created .url files, carefully constructed and sprinkled around
# in the right places, may do the trick in many cases.
#
# Format of .url files:
#       - each URL is on a separate line
#       - multiple URLs can be given, if there are several alternate URLs that point to the same content
#       - when there are multiple URLs, the URL on the first line is the default/canonical URL
#
#
# Example:    (on a default install of Ubuntu + Apache)
#
#       > echo "http://localhost/"  > /var/www/.url
#
#       > echo "http://localhost/cgi-bin/"  > /usr/lib/cgi-bin/.url
#
#       > cd /usr/lib/cgi-bin/awstats/
#
#       > url ./awstats.pl
#               http://localhost/cgi-bin/awstats/awstats.pl
#

    use strict;
    use warnings;

    use Cwd 'abs_path';
    use File::Basename;

    use Data::Dumper;
    #use Devel::Comments;           # uncomment this during development to enable the ### debugging statements


my $filename = shift    or die "Specify a filename.\n";

my ($append, $dir) = ('');
if (-f $filename) {
    $append = basename($filename);
    $dir = dirname($filename);
} else {
    $dir = $filename;
}
$dir = abs_path($dir);


my $foundit = '';
while (1) {
    if (-f "$dir/.url") {
        $foundit = "$dir/.url";
        last;
    }
    last if ($dir eq '/');
    $append = basename($dir) . '/' . $append;
    $dir = dirname($dir);
}

if (!$foundit) {
    die "No '.url' file found above that in the directory structure.\n";
}


my ($starting_URL) = slurp($foundit);
chomp $starting_URL;

# escape a few characters
#       (again, we're making some assumptions about what encoding method should be used here, but
#        hopfully we make choices that work in as many places as possible)
$append =~ s/ /%20/g;

print "$starting_URL$append\n";



# quickly read a whole file
sub slurp {my$p=open(my$f,"$_[0]")or die$!;my@o=<$f>;close$f;waitpid($p,0);wantarray?@o:join("",@o)}

