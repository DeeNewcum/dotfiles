#!/usr/bin/env perl

        # Copyright 2011, Dee Newcum.  License: GPL v3.

# Display the output of stat(2)  (struct stat)  in maximum detail.

# See http://www.gnu.org/software/libc/manual/html_node/Attribute-Meanings.html

# TODO:
#       - break out the permissions more deeply
#               use Fcntl qw( :mode );
#                   http://perldoc.perl.org/functions/stat.html
#               S_IFSOCK    // socket
#               S_IFLNK     // symlink
#               S_IFREG     // regular file
#               S_IFBLK     // block device
#               S_IFDIR     // directory
#               S_IFCHR     // character device
#               S_IFIFO     // FIFO/pipe
#
#               
#               S_ISUID     // setuid
#               S_ISGID     // setuid
#               S_ISVTX     // sticky bit


    use strict;
    use warnings;

    use List::Util qw[max];
    use Data::Dumper;
    eval "require File::Stat::Bits";        # an optional library

@ARGV or die "Please specify a filename.\n";

my %devnums = get_device_numbers();
#print Dumper \%devnums; exit;

my ($name_order, %names) = ordered_hash(
    filename => "File name",
    dev      => "Device num",
    ino      => "Inode",
    mode     => "File mode",
    nlink    => "Num hardlinks",
    uid      => "UserID",
    gid      => "GroupID",
    rdev     => "Device ID",
    size     => "Size",
    atime    => "Access time",
    mtime    => "Modification time",
    ctime    => "Inode change time",
    blksize  => "Block size",
    blocks   => "Num blocks allocated",
);

my $descrlen = max(map{length($_)} values %names) + 1;

my $first = 1;
foreach my $file (@ARGV) {
    if (!-e $file) {
        print STDERR "File not found: $file\n";
        next;
    }

    $first or print "\n";
    $first = 0;
    #(@ARGV > 1) and print $file, "\n", "-"x length($file), "\n";

    my %s;
    @s{qw[ dev ino mode nlink uid gid rdev size atime mtime ctime blksize blocks ]} = stat($file);
    $s{filename} = $file;

    $s{mtime} = localtime( $s{mtime} ) . " (local time)";
    $s{atime} = localtime( $s{atime} ) . " (local time)";
    $s{ctime} = localtime( $s{ctime} ) . " (local time)";
     
    #print "############### ", format_mode($s{mode}), "\n";
    my $mode_str = format_mode($s{mode});
    $s{mode} = sprintf("%06o     %s", $s{mode}, $mode_str);

    $s{uid} .= "  (" . getpwuid($s{uid}) . ")";
    $s{gid} .= "  (" . getgrgid($s{gid}) . ")";

    $s{size} = commify($s{size}) . " bytes";
    $s{blocks} = commify($s{blocks});

    $s{dev} .= "   (" . ($devnums{$s{dev}} || '?') . ")";

    if ($s{rdev}) {
        # There's no way we can hard-code how to calculate the major/minor numbers.
        # It varies greatly by OS:
        #
        # "Early systems stored the device number in a 16-bit integer, with 8 bits for the major
        #  number and 8 bits for the minor number. FreeBSD 5.2.1 and Mac OS X 10.3 use a 32-bit
        #  integer, with 8 bits for the major number and 24 bits for the minor number. On 32-bit
        #  systems, Solaris 9 uses a 32-bit integer for dev_t, with 14 bits designated as the major
        #  number and 18 bits designated as the minor number. On 64-bit systems, Solaris 9 represents
        #  dev_t as a 64-bit integer, with 32 bits for each number. On Linux 2.4.22, although dev_t
        #  is a 64-bit integer, currently the major and minor numbers are each only 8 bits."
        if (exists $INC{'File/Stat/Bits.pm'}) {
            $s{rdev} .= sprintf "   (%d, %d)",
                            File::Stat::Bits::dev_split($s{rdev});
        }
    } else {
        delete $s{rdev};
    }

    #print Dumper \%s;
    foreach my $name (@$name_order) {
        next unless exists $s{$name};
        printf "\%${descrlen}s  %s\n",
            ($names{$name} || $name) . ":",
            $s{$name};
    }
}





# from Stat::lsMode, written by M-J. Dominus (mjd-perl-lsmode@plover.com)
#
# licensed under the Artistic License
BEGIN {
    my @perms = qw(--- --x -w- -wx r-- r-x rw- rwx);
    my @ftype = qw(. p c ? d ? b ? - ? l ? s ? ? ?);
    $ftype[0] = '';
    sub format_mode {
      die "format_mode requires a mode as an argument" unless @_ >= 1;
      my $mode = shift;
      my %opts = @_;

      unless (defined $mode) {
        return wantarray() ? () : undef;
      }

      my $setids = ($mode & 07000)>>9;
      my @permstrs = @perms[($mode&0700)>>6, ($mode&0070)>>3, $mode&0007];
      my $ftype = $ftype[($mode & 0170000)>>12];
      my @ftype = $opts{no_ftype} ? () : ($ftype);
      
      if ($setids) {
        if ($setids & 01) {     # Sticky bit
          $permstrs[2] =~ s/([-x])$/$1 eq 'x' ? 't' : 'T'/e;
        }
        if ($setids & 04) {     # Setuid bit
          $permstrs[0] =~ s/([-x])$/$1 eq 'x' ? 's' : 'S'/e;
        }
        if ($setids & 02) {     # Setgid bit
          $permstrs[1] =~ s/([-x])$/$1 eq 'x' ? 's' : 'S'/e;
        }
      }

      if (wantarray) {
        (@ftype, @permstrs);
      } else {
        join '', @ftype, @permstrs;
      }
    }
}


sub get_mountpoints {
    if ($^O eq 'solaris') {
        return map {(split ' ')[0]} readpipe_args('df');
    } elsif ($^O eq 'linux') {
        my @a = readpipe_args('df');
        shift @a;
        return map {(split ' ')[-1]} grep /\s\S.*\s/, @a;
    }
}

sub get_device_numbers {
    my %ret = map {(stat $_)[0] => $_} get_mountpoints();
}




sub ordered_hash { my $n; my @order = grep {!($n++ % 2)} @_; return (\@order, @_) }

# add commas to a number
sub commify {(my$text=reverse$_[0])=~s/(\d\d\d)(?=\d)(?!\d*\.)/$1,/g;scalar reverse$text}


# like qx// or readpipe(), BUT it allows you to give explicitely delimited args, so you don't have to worry about escaping quotes
sub readpipe_args {my$p=open(my$f,'-|',@_)or die$!;my@o=<$f>;close$f;waitpid($p,0);wantarray?@o:join("",@o)}
