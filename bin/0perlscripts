#!/usr/bin/perl

# Try to automagically identify *all* Perl scripts on the local server.
#
# This outputs a list of filenames in the format of 'find -print0' and
# 'xargs -0'.

use strict;
use warnings;

use File::Find;
use Data::Dumper;


my %prune_dirs = map {$_ => 1} qw(
        /boot
        /proc
        /sys
        /tmp
        /lib
        /mnt
        /var/lib/yum
        /usr/src/kernels
        /var/spool
        /usr/share/man
        /home/.deleted
    );


# 'nice' ourselves to the lowest scheduling priority, since we do use a lot of
# resources, and are often running on production servers
setpriority(0, $$, 19);


#wanted_just_one("/usr/local/csomenu-test/XYR-Csomenu/blib/lib/XYR/Csomenu/Auth.pm");


my @start_dirs = ( "/" );

# Users can specify the starting dirs as command-line arguments.
if (@ARGV) {
	@start_dirs = @ARGV;
	foreach (@start_dirs) {
		if (! -e $_) {
			die "File or directory doesn't exist:  $_\n";
		}
	}

# Users can also pipe a list of FILES (not directories) into STDIN.
} elsif (! -t STDIN) {
	$/ = "\0";		# $INPUT_RECORD_SEPARATOR
	while (<STDIN>) {
		chomp;
		wanted_just_one($_);
	}
	exit;
}


find( \&wanted, @start_dirs );



# run wanted() on a single filename
sub wanted_just_one {
    my ($filename) = @_;

    $File::Find::name = $filename;
    (local $_ = $filename) =~ s#^.*/##;
    ($File::Find::dir = $filename) =~ s#/[^/]*$##;

    chdir $File::Find::dir;

    #print Dumper [ $File::Find::name, $_, $File::Find::dir ];

    wanted();
}


sub wanted {
    # There are three inputs:
    #       $File::Find::dir    the current directory name
    #       $_                  the current filename within that directory
    #       $File::Find::name   the complete pathname to the file

    if ($prune_dirs{ $File::Find::name }
            || $File::Find::name =~
                    m#/(?: \.cpan | \.cpanm | \.git | \.vim | \.svn )$#x
        )
    {
        $File::Find::prune = 1;
    }

    if (-f                      # is a file
        && -s $_ < 100 * 1024   # Massive text files are almost never
                                #     something we want. They're usually some
                                #     code-generated dump of something not
                                #     useful.
        && -T                   # text, not binary
        #&& Perl::Metrics::Simple->is_perl_file($File::Find::name)
        && is_perl_code($_)
    ) {
        print $File::Find::name, chr(0);
    }
}


# The heavy lifting is done by:
#       https://en.wikipedia.org/wiki/File_(command)
#       https://manpages.debian.org/buster/libmagic1/magic.5.en.html
# Very informative for this regex is the output of this command:
#       grep -iP '\tperl' /usr/share/misc/magic
sub is_perl_code {
    my ($filename) = @_;

    return 1
        if ($filename =~ /\.pm$/);

    # This check is error-prone. Most Perl scripts will be chmod +x, otherwise
    # they won't function properly. Also, disabling this heuristic check slows
    # this script wayyy down.
    # (TODO: why does it slow this script down so much?)
    #return 0
    #    if (! -x $filename && $filename !~ /\.t$/);

    open my $pipe, '-|',
        #'file', '--brief', $filename
        "head --bytes=1024 '$filename' | file --brief -"
                # ^^ 1024 bytes should be enough to read an entire pl2bat header
        or die $!;
    local $/ = undef;       # input record separator
    my $classification = <$pipe>;
    close $pipe;

    if ($classification =~ /^perl5?(?! Storable)/i) {
        return 1;
    }
    if ($classification =~ m#^a /\S+/perl script text executable#) {
        return 1;
    }
    return 0;
}
