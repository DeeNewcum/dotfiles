#!/usr/bin/perl

        # Copyright 2014, Dee Newcum.  License: GPL v3.

# pretty-prints JSON, XML, and other data formats

            # TODO: pretty-print HTML
            #               (I tried HTML::TreeBuilder, but HTML::Element->as_HTML() spits out ugly HTML

    use strict;
    use warnings;

    use LWP::UserAgent;
    use HTTP::Request::Common;
    use Data::Dumper;           # in Perl core since v5.005
    use IPC::Open3 ();          # in Perl core since v5.000

die "This script under construction. To use the last working version, see\nhttps://github.com/DeeNewcum/dotfiles/blob/05b222173957480610a0f32da906e2ccbcf83c93/bin/pretty\n";

my %mime_type_mapping = (
        'application/xml' => \&pretty_xml,
        #'text/html' => \&pretty_html,
        # TODO -- .json files seem to be detected as "text/plain" or 
        #               "UTF-8 Unicode text, with very long lines, with no line terminators"
        #               Note that JSON::PP has been in Perl core since v5.13.9, Jan 2011
    );

## process command line
if (@ARGV != 1) {
    die "Please specify one file to prettify.\n";
}
my $filename = shift @ARGV;
process_one_file($filename);



sub process_one_file {
    my $filename = shift;

    ## get the contents of the file
    my $file_contents;
    if ($filename eq '-') {
        $file_contents = do {local $/=undef; <STDIN>};
    } elsif ($filename =~ m#^https?://#i) {
        my $ua = LWP::UserAgent->new;
        $ua->agent("Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:25.0) Gecko/20100101 Firefox/29.0");
        $file_contents = $ua->request(GET $filename)->content;
    } else {
        $file_contents = slurp($filename);
    }

    # file(1) / magic(5)
    my $mime_type = pipe_to_file($file_contents);
    $mime_type =~ s/; charset=.*//;
    #print "magic(5) is >>$mime_type<<\n";      exit;
    my $pretty_func = $mime_type_mapping{$mime_type};
    if (is_json($file_contents)) {
        $pretty_func = \&pretty_json;
    }

    ## pretty-print it
    if (defined($pretty_func)) {
        my $parsed = $pretty_func->($file_contents);
    } else {
        print STDERR "Unrecognized file type for $filename\n";
    }
}


# pass the provided file-contents through STDIN into file(1)/magic(5), and
# return the answer
sub pipe_to_file {
    my ($file_contents) = @_;

    # because we're both piping into STDIN *and* piping out of STDOUT, we have
    # to use IPC::Open3 (or IPC::Open2)
    my $pid = IPC::Open3::open3(my $chld_in, my $chld_out, '>&STDERR',
                    'file', '-bi', '-');

    # I'm not sure why, but file(1) doesn't want to input all of the file
    # contents. It appears to stop reading after a certain point (after it's
    # decided it has processed enough of the header to know for sure what file
    # type it is, perhaps?)
    local $SIG{PIPE} = 'IGNORE';

    print $chld_in $file_contents;
    close $chld_in;

    local $/ = undef;       # read in the whole thing at once
    my $output = <$chld_out>;
    $output =~ s/[\n\r]+$//s;       # chomp

    waitpid($pid, 0);

    return $output;
}


sub is_json {
    my ($file_contents) = @_;

    # from https://stackoverflow.com/a/3845829/1042525

    ## TODO -- I left off here
}


sub pretty_json {
    my ($file_contents) = @_;

    my $json;
    if (can_use("JSON::XS")) {
        $json = new JSON::XS;
    } elsif (can_use("JSON")) {
        $json = new JSON;
    } else {
        die_modules_required("JSON", "JSON::XS");
    }

    $json->utf8->pretty;

    my $decoded = $json->decode($file_contents);
    my $reencoded = $json->encode($decoded);

    output('set syntax=javascript', $reencoded);
}


sub pretty_xml {
    my ($file_contents) = @_;

    if (can_use("XML::Simple")) {
        my $xml = XMLin($file_contents);
        my $reencoded = XMLout($xml);
        output('set syntax=xml', $reencoded);
    } else {
        die_modules_required("XML::Simple");
    }
}



sub die_modules_required {
    die join("\n\t",
        "to parse " . uc($ARGV{format}) . ", you must install ONE of these modules:",
        @_)     . "\n";
}


# Poor-man's self-documenting arguments, like Getopt::Lazy or Getopt::Long::Descriptive,
# but works with the stock Getopt::Long.
# The per-argument documentation comes from the source code comments.
#
# It greps the source code, so it's somewhat brittle and relies on a specific format:
#       - the first line starts with "GetOptions("
#       - arguments should be on separate lines
#       - the last line starts with ")"
sub usage_getopt {
    @ARGV = ($0);
    while (<>) {
        next if !(/^\s*GetOptions/ .. /^\s*\)/) || /^\s*(GetOptions|\)|map)/;
        printf "  %-30s", /['"](.*?)['"]/ ? join( ", ", map { s/[=:][sif]$//; /../ ? "--$_" : "-$_" } split /\|/, $1 ) : '';
        s/.*#/#/ and print or print "\n";
    }
}


sub output {
    my ($vim_command, $contents) = @_;
    if (-t STDOUT) {
        vim($vim_command, $contents);
    } else {
        # If STDOUT goes to a pipe, then don't use vim, just send the file to the pipe.
        print $contents;
    }
}





# tries to 'use' the specified module; returns true/false, whether the module was loaded
#   #>> maybe replace this with the popular and well-tested Module::Runtime?
sub can_use {eval "use $_[0];"; !$@}

# check if the given function exists  (and, if so, it returns a pointer to it)
no strict 'refs';
sub function_exists {defined&{$_[0]}?\&{$_[0]}:undef}
use strict 'refs';

# display a string to the user, via vim    (note: first arg is a .vimrc command;  use the empty-string if it's unneeded)
sub vim {my$pid=open my$vim,"|-",'vim','-R','-c',shift,'-';print$vim @_;close$vim;waitpid$pid,0}

# quickly read a whole file
sub slurp {my$p=open(my$f,"$_[0]")or die$!;my@o=<$f>;close$f;waitpid($p,0);wantarray?@o:join("",@o)}
