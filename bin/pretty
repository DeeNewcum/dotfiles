#!/usr/bin/perl

# pretty-prints JSON, XML, and other data formats

    use strict;
    use warnings;

    use Getopt::Long;
    use Data::Dumper;


## process command line
our %ARGV;
process_cmdline();


## pretty-print the file
my $pretty = function_exists("pretty_$ARGV{format}")     or die;
my $file_contents = $ARGV{file} eq '-'
        ? do {local $/=undef; <STDIN>}
        : slurp($ARGV{file});
my $parsed = $pretty->($file_contents);



sub pretty_json {
    my ($file_contents) = @_;

    my $json;
    if (can_use("JSON::XS")) {
        $json = new JSON::XS;
    } elsif (can_use("JSON")) {
        $json = new JSON;
    } else {
        die_modules_required("JSON", "JSON::XS");
    }

    $json->utf8->pretty;

    my $decoded = $json->decode($file_contents);
    my $reencoded = $json->encode($decoded);

    vim('set syntax=javascript', $reencoded);
}





sub process_cmdline {
    GetOptions( \%ARGV,
        'json|j',           # format: JSON
        'xml|x',            # format: XML
        'args', 'help',
    ) or usage();
    %ARGV = map {length()?$_:1} %ARGV;      # arguments are optional
    $ARGV{help} and usage();

    foreach my $format (qw( json xml )) {
        if (exists $ARGV{$format}) {
            delete $ARGV{$format};
            $ARGV{format} = $format;
            last;
        }
    }
    die "Please specify a format.\n"    unless $ARGV{format};

    if (@ARGV && (-e $ARGV[0] || $ARGV[0] eq '-')) {
        $ARGV{file} = shift @ARGV;
    }
    die "Please specify a file to dumper.\n"    unless $ARGV{file};

    $ARGV{args} and die Dumper {'%ARGV' => \%ARGV, '@ARGV' => \@ARGV};
    #die Dumper {'%ARGV' => \%ARGV, '@ARGV' => \@ARGV};
}




sub usage {
    print "Usage:  dumper <format> <filename>\n";
    usage_getopt();
    exit;
}


sub die_modules_required {
    die join("\n\t",
        "to parse " . uc($ARGV{format}) . ", you must install one of these modules:",
        @_)     . "\n";
}


# Poor-man's self-documenting arguments, like Getopt::Lazy or Getopt::Long::Descriptive,
# but works with the stock Getopt::Long.
# The per-argument documentation comes from the source code comments.
#
# It greps the source code, so it's somewhat brittle and relies on a specific format:
#       - the first line starts with "GetOptions("
#       - arguments should be on separate lines
#       - the last line starts with ")"
sub usage_getopt {
    @ARGV = ($0);
    while (<>) {
        next if !(/^\s*GetOptions/ .. /^\s*\)/) || /^\s*(GetOptions|\)|map)/;
        printf "  %-30s", /['"](.*?)['"]/ ? join( ", ", map { s/[=:][sif]$//; /../ ? "--$_" : "-$_" } split /\|/, $1 ) : '';
        s/.*#/#/ and print or print "\n";
    }
}





# tries to 'use' the specified module; returns true/false, whether the module was loaded
sub can_use {eval "use $_[0];"; !$@}

# check if the given function exists  (and, if so, it returns a pointer to it)
no strict 'refs';
sub function_exists {defined&{$_[0]}?\&{$_[0]}:undef}
use strict 'refs';

# display a string to the user, via vim    (note: first arg is a .vimrc command;  use the empty-string if it's unneeded)
sub vim {my$pid=open my$vim,"|-",'vim','-R','-c',shift,'-';print$vim @_;close$vim;waitpid$pid,0}

# quickly read a whole file
sub slurp {my$p=open(my$f,"$_[0]")or die$!;my@o=<$f>;close$f;waitpid($p,0);wantarray?@o:join("",@o)}
