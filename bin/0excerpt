#!/usr/bin/perl

# Searches local log files for a regular expression, and produces an .html
# report that shows the matches, as well as some nearby lines for context.
#
# The "0" prefix means, for my personal scripts and shell aliases, that these
# tools process records separated by null characters (like find's -print0).
# For this particular script, it expects the list of filenames to search to be
# piped to its STDIN.

    # TODO:
    #
    # - try to auto-parse some dates out of each log file line, and then add a
    #   cmdline argument that allows restriction of matches to a specific time
    #   period
    #       - DateTime::Format::DateParse would probably do the parsing
    #         of the cmdline argument, and we would store the start/end dates as DateTime objects
    #       - for parsing generic date strings found in logs, we might try some of these:
    #           - Date::Manip::Date     (not in Perl core)
    #           - Date::Parse           (not in Perl core)
    #           - Time::ParseDate       (not in Perl core)
    #       - For the lines that don't have any parsable date in them... should
    #         we report the count of those?   <= Maybe that would work, as long
    #         as they're a cmdline arg to suppress these warnings.
    #
    #   - if the start of the cmdline-specified time range is after the mtime
    #         of the file, then we can probably just skip that file!
    #
    #   - similarly, if the last lines of the log file are before the start of
    #         the cmdline-specified time range, then we can also skip that file!
    #
    #   - maybe come up with a system for caching the byte offset => line number
    #         information, so that we can do binary search within a log file
    #         (which requires random access, normally impossible with text files
    #         where you want to maintain the line number information) as
    #         suggested here: https://paperlined.org/dev/perl/modules/related_modules/text_files_line_numbers.md

    use strict;
    use warnings;

    use File::Temp ();              # Perl core
    use Getopt::Long ();            # Perl core
    use IO::Uncompress::Gunzip ();  # Perl core
    use POSIX ();                   # Perl core
    use Text::Wrap ();              # Perl core

    # Tries to 'require' the specified list of modules, and provide a
    # user-friendly error if any aren't found.
       #>> maybe replace this with the popular and well-tested Module::Runtime?                                            
    sub can_require {
        my @modules_requested = @_;

        my @modules_not_found;
        foreach my $module (@modules_requested) {
            eval "require $module";
            if ($@) {
                if ($@ =~ /^Can't locate /s) {
                    push @modules_not_found, $module;
                } else {
                    warn $@;
                    exit 1;
                }
            }
        }

        # show the full list of modules not installed, at the end
        if (@modules_not_found) {
            print STDERR "The following module(s) are required but not installed:\n";
            print STDERR "\t", join(" ", @modules_not_found), "\n";
            exit 1;
        }
    }

    BEGIN {
        can_require 'Archive::Zip',                 # not Perl core, but uniquely critical to this script's functioning
                    'DateTime',                     # not Perl core, but river stage 4
                    'DateTime::Format::Natural',    # not Perl core, but river stage 3
                    'Syntax::Highlight::Engine::Simple';    # not Perl core, but it's pure Perl, and it saves me a lot of work

        Archive::Zip->import(qw( AZ_OK ));
    }

    use Data::Dumper;

# like grep's --before-context and --after-context
sub NUM_CONTEXT_LINES { 50 }


###########################################
## parse the command-line arguments
###########################################
sub usage {
    print <<'EOF';
usage: 0excerpt <zip_file_name> <regexp>

<zip_file_name>
        The name of the zipfile to create within /var/tmp/

<regexp>
        The Perl regexp to search all log files for.

--earliest <date>
        Don't look for matches any earlier than this. Can speed things up
        significantly. Examples of date strings accepted can be found under
        Date::Parse.

--latest <date>
        Don't look for matches any later than this. Might speed things up some.
EOF
    exit;
}

# TODO: replace the below with Getopt::Long

usage() unless (@ARGV >= 2);

%::ARGV = (
    zipfile => $ARGV[0],
    regexp => $ARGV[1],
);

if (-t STDIN) {
    die "A list of file names to grep should be piped into this script.\n";
}


###########################################
## read in the list of filenames
###########################################
my @local_log_files;
$/ = chr(0);            # $INPUT_RECORD_SEPARATOR
while (<STDIN>) {
    chomp;
    push @local_log_files, $_
        if (length($_));
}

    sub _check_if_wrong_delimiter {
        return unless @local_log_files;

        # "goatse operator"
        my $num_newlines =()= $local_log_files[0] =~ /\n/sg;
        if (@local_log_files == 1 && $num_newlines > 3) {
            print STDERR "\nWARNING: The list of filenames piped into 0excerpt should be null-delimited,\n"
                    . "and it looks like you may have accidentally used a newline-delimited list.\n\n";
        }
    }

_check_if_wrong_delimiter();

# do this at the very end, just to make sure the user sees it
END {
    _check_if_wrong_delimiter();
}

$/ = "\n";            # $INPUT_RECORD_SEPARATOR


###########################################
## various setup
###########################################

# set us to the lowest scheduling priority, because grepping can take a lot of
# system resources
setpriority(0, 0, 19);

my $tempdir = File::Temp::tempdir(CLEANUP => 1);
#print ">> tempdir:   $tempdir\n";

my $long_hostname = readpipe('hostname');
$long_hostname =~ s/[\n\r]+$//s;

my $short_hostname = readpipe('hostname -s');
$short_hostname =~ s/[\n\r]+$//s;


###########################################
## search through every file
###########################################

# sum up the total logfile size
my $total_bytes_to_read = 0;
foreach my $logfilename (@local_log_files) {
    if (-f $logfilename) {
        $total_bytes_to_read += -s $logfilename;
    }
}

# search through every file
my @last_n_lines;
my $num_files_scanned = 0;
my $num_files_matched = 0;
my $bytes_read_in_previous_files = 0;
foreach my $logfilename (@local_log_files) {
    if (! -f $logfilename) {
        print STDERR "File '$logfilename' not found.\n";
        next;
    }

    my $logfile_fh;
    my $progress_fh;        # which filehandle do we use with tell() inside update_progress() ?
    if ($logfilename =~ /\.gz$/) {
        #IO::Uncompress::Gunzip::gunzip($logfilename => \$logfile_fh)
            #or die $IO::Uncompress::Gunzip::GunzipError;
        $logfile_fh = IO::Uncompress::Gunzip->new($logfilename)
            or die $IO::Uncompress::Gunzip::GunzipError;
        $progress_fh = $logfile_fh->{FH};
    } else {
        open $logfile_fh, '<', $logfilename
            or die "Error when openening $logfilename: $!\n";
        $progress_fh = $logfile_fh;
    }

    $num_files_scanned++;

    ###########################################
    ## search through one file
    ###########################################
    my $last_match_lineno = -999;
    my $last_parsed_date = undef;
    while (defined(my $line = <$logfile_fh>)) {
        update_progress($bytes_read_in_previous_files, $progress_fh);

        # TODO: ugh, this line really slows this script down
        #my ($datetime, $original_date_text) = parse_date($line);
        my ($datetime, $original_date_text);        # stub out the above, for now

        if (defined($datetime)) {
            $last_parsed_date = $datetime;
        }

        if ($line =~ /$ARGV{regexp}/o
                && is_date_within_user_criteria($last_parsed_date)) {
            ####==--  the user-specified criteria was met  --==####

            ## DEBUG ONLY -- REMOVE ME!
            #use Term::ANSIColor qw(colored);
            #if (defined($datetime)) {
            #    print $line, "\t\t", colored(['red'], $datetime->iso8601), "\n";
            #} else {
            #    print $line, "\t\t", colored(['red'], "(no date found)"), "\n";
            #}

            # go back and display all lines that lie within @last_n_lines
            # (this is similar to grep's --before-context)
            foreach my $line_ref (@last_n_lines) {
                report_file_match($logfilename, $line_ref->[1], $line_ref->[0]);
            }
            @last_n_lines = ();

            # now display the current line
            my @extra_syntax;
            if (defined($original_date_text)) {
                # for documentation on this, see https://metacpan.org/pod/Syntax::Highlight::Engine::Simple#setSyntax
                push @extra_syntax, {
                        class  => 'parsed_date',
                        regexp => quotemeta($original_date_text),
                    };
            }
            report_file_match($logfilename, $line, $., \@extra_syntax);     # $. = $INPUT_LINE_NUMBER

            $last_match_lineno = $.;

        } elsif ($. - $last_match_lineno < NUM_CONTEXT_LINES) {
            ####==--  display the appropriate number of lines after the last match  --==####

            # (similar to grep's --after-context)
            report_file_match($logfilename, $line, $.);     # $. = $INPUT_LINE_NUMBER

        } else {
            ####==--  There isn't an apparent need to display this line   --==####
            ####==--  ...right now. Remember it in case we need it soon.  --==####

            # add it to the queue
            push @last_n_lines, [$., $line];        # $. = $INPUT_LINE_NUMBER

            # if the queue is too big now, remove any unwanted lines
            while (scalar(@last_n_lines) > NUM_CONTEXT_LINES) {
                shift @last_n_lines;
            }
        }
    }

    $bytes_read_in_previous_files += -s $logfilename;

    if ($last_match_lineno >= 0) {
        close $logfile_fh;
        $num_files_matched++;
    }

    process_one_report_file();
}

clear_line_move_to_col1();

if ($num_files_matched == 0) {
    # Without this, the people who look inside the .zip might be unsure whether
    # we searched this specific host.
    open my $logfile_fh, '>', "$tempdir/nothing_found_at_$short_hostname.txt"
        or die $!;

    print $logfile_fh "All the logfiles at $long_hostname were searched, but no matches were found.\n";

    close $logfile_fh;
}


################################################################################
## make all our changes to the zip file at once, to avoid race conditions when
## running on different servers simultaneously
################################################################################

# initialization
my $zip = Archive::Zip->new();
if (-f $ARGV{zipfile}) {
    $zip->read($ARGV{zipfile})
        == AZ_OK or die "Error reading $ARGV{zipfile}\n";
}

delete_host_logfiles();

# update our files
$zip->addTree($tempdir, '');

# write the zip file out
if (-f $ARGV{zipfile}) {
    $zip->overwrite()
        == AZ_OK or die "Unable to write to $ARGV{zipfile}.\n";
} else {
    $zip->writeToFileNamed($ARGV{zipfile})
        == AZ_OK or die "Unable to write to $ARGV{zipfile}.\n";
}

exit;





################################################################################
## HTML report generation, for a single file
################################################################################

BEGIN {
    my $last_logfilename = '';
    my $last_lineno = -1;
    my $fout;
    my $accum_line_numbers = '';     # this is the "left column-table", per https://stackoverflow.com/a/35815198/1042525
    my $accum_matches = '';          # this is the "right column-table", per https://stackoverflow.com/a/35815198/1042525
    my $highlight;

    # A single logfile line is passed into this, but we can end up outputting
    # the HTML header info first, if that's needed.
    sub report_file_match {
        my ($logfilename, $line, $lineno, $additional_syntax) = @_;
            
            # $additional_syntax is optional. If present, it should be a list-ref
            # that could be passed into
            # Syntax::Highlight::Engine::Simple::Perl->setSyntax() 
            # (but is actually passed to appendSyntax()).
            # 
            # For example:
            #       $additional_syntax = [
            #           {
            #               class => 'tag',
            #               regexp => "<.+?>",
            #           },
            #           {
            #               class => 'quote',
            #               regexp => "'.*?'",
            #               container => 'tag',
            #           },
            #       ];

        # remove any line-endings
        $line =~ s/(\012|\015\012?)$//s;

        if (!defined($highlight)) {
            $highlight = Syntax::Highlight::Engine::Simple->new();
        }

        # recreate the syntax... overwrite any existing syntax rules
        # the 'class' here is the DOM/CSS class name
        $highlight->setSyntax(
            syntax => [
                {
                    class => 'user_regexp',
                    regexp => $ARGV{regexp},
                },
                {
                    class => 'error',
                    regexp => '(?i)\berror\b',
                },
                {
                    class => 'warning',
                    regexp => '(?i)\bwarn(ing)?\b',
                },
                #{
                #    class => 'datetime',        # this regexp is just a date
                #    regexp => '\b2\d\d\d[-/]\d\d[-/]\d\d\b',
                #},
                #{
                #    class => 'datetime',        # this regexp is just a date
                #    regexp => '\b(?:Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\b[^a-zA-Z0-9]*\d+',
                #},
                #{
                #    class => 'datetime',        # this regexp is just a time
                #    regexp => '\b\d\d:\d\d(:\d\d)?\b',
                #},
            ]
        );
        if (defined($additional_syntax) && scalar(@$additional_syntax) > 0) {
            $highlight->appendSyntax(syntax => @$additional_syntax);
        }

        if ($last_logfilename ne $logfilename) {
            if ($last_lineno >= 0) {
                process_one_report_file();
            }

            my $logfilename_fixed = $logfilename;
            $logfilename_fixed =~ s#^[/\\]##s;
            $logfilename_fixed =~ s#[/\\]#_#g;

            my $excerpt_filename = "$tempdir/${short_hostname}___$logfilename_fixed.html";
            open $fout, '>', $excerpt_filename
                or die "Unable to write to $excerpt_filename: $!\n";

            print $fout <<"EOF";
<style>
    /* useful for debugging, in cases where the line numbers get misaligned
     * from their corresponding text lines */
    /*
     body > table > tbody > tr > td {vertical-align:top}
     table table    {border:1px solid #faa}
     table table td {border:1px solid #6b6}
     td             {border:1px solid #aaf}
    */

    /* Syntax::Highlight::Engine::Simple stuff */
    .user_regexp {background-color: #ff6}
    .error       {background-color: #fcc}
    .warning     {background-color: #89f}
    .datetime {
        color: #a0a;
        font-weight: bold;
    }
    .parsed_date {background-color: #f9f}

    table table td {
        vertical-align: top;
        /* border:1px solid #aaa; */

        /* make all table cells look like a <pre> */
        font-family: monospace;
        white-space: pre;
    }

    /* prevent line-wraps from being copied into the clipboard */
    label {
        user-select: none;
    }


    /* ======== the line-number side ======== */
    td:nth-child(1) table {
        margin-right: 0.5em;
    }
    td:nth-child(1) table td {
        text-align: right;
    }

    table tr td:nth-child(1) table tr.ellipsis td {
        text-align: right;
        padding-top: 1em;
        padding-bottom: 1em;
        padding-right: 0.5em;
    }


    /* ======== the log-text side ======== */
    td:nth-child(2) table td {
        /* a hanging indent https://www.thesitewizard.com/css/hanging-indents.shtml */
        padding-left: 40px;
        text-indent: -40px;
    }

    table tr td:nth-child(2) table tr.ellipsis td {
        text-align: left;
        padding-top: 1em;
        padding-bottom: 1em;
        /* stop the hanging-indent */
        padding-left: 1em;
        text-indent: 0;
    }

    td.evenline {background-color:#ddd}
</style>

<title>an excerpt of $logfilename &mdash; located on $long_hostname</title>
<h1>an excerpt of $logfilename &mdash; located on $long_hostname</h1>

<table>
EOF

            $accum_line_numbers = "<!-- the line-number side -->\n"
                                    . "<table>\n";

            $accum_matches = "<!-- the log-text side -->\n"
                                    . "<table>\n";

            $last_logfilename = $logfilename;
        }

        if ($last_lineno >= 0 && $lineno - $last_lineno > 1) {
            # indicate that we just jumped to a new group of lines
            $accum_line_numbers .= "<tr class=ellipsis><td>.\n.\n.\n.\n.\n.</td></tr>\n";
            $accum_matches      .= "<tr class=ellipsis><td> \n \n \n \n \n </td></tr>\n";
        }
        $last_lineno = $lineno;

        $Text::Wrap::columns = 150;
        $line = Text::Wrap::wrap("", "", $line);
        $line =~ s/\n+$//s;
        # this is the so-called "goatse operator": it counts the number of times it matches
        my $num_extra_lines =()= $line =~ /\n/sg;
        $line = $highlight->doStr(str => $line);
        $line =~ s#\n#<label>\n</label>#sg;     # prevent line-wraps from being copied into the clipboard
        my $odd_even = ($lineno % 2) ? "oddline" : "evenline";
        $line = '&nbsp;'    if (length($line) == 0);    # if there's no text, this table cell's height gets minimized
        $accum_matches .= "<tr><td class='$odd_even'>$line</td></tr>\n";

        $accum_line_numbers .= "<tr><td>" . commify($lineno)
                . "<br/> " x $num_extra_lines
                . "</td></tr>\n";
    }

    # should be called, once, after the very last call to report_file_match()
    sub process_one_report_file {
        return unless ($last_lineno >= 0);

        print $fout "<tr><td>\n$accum_line_numbers</table>\n</td>\n",
                    "<td>\n$accum_matches</table>\n</td>\n",
                    "</table>\n";

        print $fout "<p>If you're familiar with ",
                    "<a href='https://cheatography.com/davechild/cheat-sheets/regular-expressions/'>regular expressions</a>, ",
                    "the exact regexp used here is <tt style='color: #090; font-weight: bold'>/",
                    Syntax::Highlight::Engine::Simple::_html_escape($ARGV{regexp}), "/</tt>.\n";

        # $^T is $BASETIME, the time that the program began running
        print $fout "<p>This report was generated at ", scalar(localtime($^T)), " local time ",
                    "(this system's timezone is ", POSIX::strftime("%Z", localtime()), ").\n";

        close $fout;

        clear_line_move_to_col1();
        print "matches were found in $last_logfilename\n";

        # reset everything, so that it's clear that this information has been
        # output already
        $last_logfilename = '';
        $last_lineno = -1;
        $fout = undef;
        $accum_line_numbers = '';
        $accum_matches = '';
    }
}


################################################################################
## zip file handling
################################################################################

# look inside the .zip file, and if there are any files related to the current
# hostname, delete all of those files, to make sure there aren't any stale files
# left over
sub delete_host_logfiles {
    #my @members = $zip->members();
    #print Dumper \@members; exit;

    foreach ($zip->membersMatching('^' . quotemeta($short_hostname) . '___.*')) {
        $zip->removeMember($_);
    }

    foreach ($zip->membersMatching('^nothing_found_at_' . quotemeta($short_hostname) . '.*')) {
        $zip->removeMember($_);
    }
}


################################################################################
## date selection logic, i.e. --earliest and --latest
################################################################################

# Check if we can parse some sort of date/time out of the middle of this string.
#
# This is a small wrapper for DateTime::Format::Natural::extract_datetime()
# which does almost all of the heavy lifting.
#
# If a date/time is found, it returns a DateTime object.
# When called in list context, it returns ($datetime_object, $datetime_string).
#
# Otherwise, returns undef to indicate no date/time was found.
sub parse_date {
    my ($log_line) = @_;

    my $date_parser = DateTime::Format::Natural->new();
    my @excerpts = $date_parser->extract_datetime($log_line);

    if (@excerpts) {
        # we found at least one date string, so parse the first one found
        my $datetime_obj = $date_parser->parse_datetime($excerpts[0]);
        if (wantarray) {
            return ($datetime_obj, $excerpts[0]);
        } else {
            return $datetime_obj;
        }

    } else {
        # no date string found
        return;
    }
}


# given the specified DateTime object, return whether that DateTime lies within
# the --earliest and/or --latest criteria that the user specified
sub is_date_within_user_criteria {
    my ($datetime_obj) = @_;

    # if no date has been parsed yet for this log file, then by default display
    # all log lines
    return 1 if (!defined($datetime_obj));

    # TODO -- implement me
    use feature 'state';
    state $is_first_time = 1;
    if ($is_first_time) {
        warn "implement me, please!\n\t";
        $is_first_time = 0;
    }

    return 1;
}


################################################################################
## progress updates
################################################################################


BEGIN {
    my $last_update_at = 0;

    sub update_progress {
        my ($bytes_read_in_previous_files, $progress_fh) = @_;

        # don't update any faster than every 2 seconds
        return unless (time() - $last_update_at >= 2);

        $last_update_at = time();

        my $bytes_read_in_this_file = tell($progress_fh);
        my $total_bytes_read = $bytes_read_in_previous_files + $bytes_read_in_this_file;

        my $seconds_so_far    = time() - $^T;
        my $seconds_total     = ($seconds_so_far / $total_bytes_read) * $total_bytes_to_read;
        my $seconds_remaining = $seconds_total - $seconds_so_far;

        clear_line_move_to_col1();
        printf "Scanning file %d of %d  (%0.1f%% complete, %d minutes left)   ",
            $num_files_scanned,
            scalar(@local_log_files),
            100 * $total_bytes_read / $total_bytes_to_read,
            $seconds_remaining / 60;
    }
}


sub clear_line_move_to_col1 {
    $| = 1;             # enable $OUTPUT_AUTOFLUSH
    print "\e[2K",      # the ANSI sequence for "erase the entire line"
          "\e[1G";      # the ANSI sequence for "move cursor to column 1"
}




# add commas to a number
sub commify {(my$text=reverse$_[0])=~s/(\d\d\d)(?=\d)(?!\d*\.)/$1,/g;scalar reverse$text}
