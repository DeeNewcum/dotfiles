#!/usr/bin/perl

# Functions like '0xgrep', but first it runs the code through:
#   perltidy --delete-block-comments --delete-side-comments --delete-pod
# to remove all comments and POD, so only code can be matched.
#
# Note: The list of filenames *must* be received via STDIN, and must be separated by null
# characters. The arguments to 'tcgrep' must be passed in via our command line, and they will be
# passed unmodified through to tcgrep.

    use strict;
    use warnings;
    use English;

    use IPC::Run3;
    #use File::Temp;
    use Data::Dumper;


if (! @ARGV) {
    exec 'tcgrep', '-h';
    exit;
}
my @TCGREP_ARGV = @ARGV;

$INPUT_RECORD_SEPARATOR = chr(0);
my @filenames = map {chomp;   $_} <STDIN>;


$SIG{'INT'} = sub { exit; };     # Ctrl-C

$INPUT_RECORD_SEPARATOR = "\n";
foreach my $script_filename (@filenames) {
    #print STDERR ">$script_filename<\n";

    my ($perltidy_out, @tcgrep_out);

    if (!-f $script_filename) {
        print STDERR "File not found ---- $script_filename\n";
        next;
    }

    # Skip source files that don't, at a bare minimum, match the regexp before perltidy
    # is run.
    if (! speculative_check( $script_filename )) {
        next;
    }

    run3 ['perltidy', '--delete-block-comments', '--delete-side-comments', '--delete-pod',
                        $script_filename, '-st', '-se'], 
        \undef, \$perltidy_out, undef;
        # ^STDIN      ^STDOUT     ^STDERR

    (($? & 127) == 2) and exit;     # the user did a Ctrl-C

    run3 ['tcgrep', @TCGREP_ARGV, '-'],
        \$perltidy_out, \@tcgrep_out, undef;
        # ^STDIN          ^STDOUT     ^STDERR

    (($? & 127) == 2) and exit;     # the user did a Ctrl-C

    foreach my $line (@tcgrep_out) {
        chomp $line;
        print "$script_filename: $line\n";
    }
}



# Run 'tcpgrep' on the code before passing it to perltidy, just because perltidy is so expensive.
sub speculative_check {
    my ($original_filename) = @_;

    run3 ['tcgrep', '-s', @TCGREP_ARGV, $original_filename],
        \undef, \undef, undef;
        # ^STDIN  ^STDOUT   ^STDERR

    (($? & 127) == 2) and exit;     # the user did a Ctrl-C
   
    my $child_retval = $? >> 8;

    return ($child_retval == 0);        # 0 => true, non-zero => false
}
