#!/usr/bin/perl

# Does 'git fetch --all; git merge' in *all* repos directly under the current
# working directory, and reports the status of the fetch + merge processes.

use strict;
use warnings;

use Cwd;                # core Perl
use Data::Dumper;       # core Perl
#use Devel::Comments;   # uncomment to enable "smart comments" -- those that start with ###
use File::Find;         # core Perl
use File::Spec;         # core Perl

my $starting_dir = Cwd::getcwd();

my $num_repos_processed = 0;
File::Find::find(\&handle_path, $starting_dir);

if (!$num_repos_processed) {
    print "No git repositories found in the current directory.\n";
}


sub handle_path {
    # at this point, the variables are:
    #   $File::Find::dir is the current directory name
    #   $_ is the current filename within that directory
    #   $File::Find::name is the complete pathname to the file

    # only go one level deep
    ### $File::Find::name
    $File::Find::prune = 1  unless ($File::Find::name eq $starting_dir);

    my $git_dir;
    if (is_git_dir($File::Find::name)) {
        $git_dir = $File::Find::name;
    } else {
        $git_dir = File::Spec->catfile($File::Find::name, '.git');
        if (is_git_dir($git_dir)) {
            chdir($git_dir);
        } else {
            return;
        }
    }

    $File::Find::prune = 1;     # I don't think we'll ever find a .git/
                                # underneath another .git/
    $num_repos_processed++;

    my $work_tree = get_working_tree_from_git_dir($git_dir);
    my $work_tree_rel = defined($work_tree) 
                ? File::Spec->abs2rel($work_tree, $starting_dir)
                : File::Spec->abs2rel($git_dir, $starting_dir);
    ### $git_dir
    ### $work_tree
    ### $work_tree_rel

    my @remotes = readpipe_args(qw[ git remote ]);
    if (!@remotes) {
        print "$work_tree_rel -- no remotes found\n";
        return;
    }

    my @remote_tracked_branches = readpipe_args(qw[ git branch -r ]);
    if (!@remote_tracked_branches) {
        print "$work_tree_rel -- no remote-tracked branches found\n";
        return;
    }

    my $num_commits_before_fetch = readpipe_args(qw[ git rev-list --all --count ]);

    my $git_fetch = readpipe_args(qw[ git fetch --all --quiet ]);

    # TODO: Check its output, and maybe report specific errors to the user at this point?

    my $num_commits_after_fetch = readpipe_args(qw[ git rev-list --all --count ]);

    if ($work_tree) {
        my @status = readpipe_args("git", "--work-tree=$work_tree",
                                    qw[ status --porcelain ]);

        my $num_unstaged_but_tracked = 0;
        my $num_untracked = 0;
        my $num_staged = 0;
        my $num_tracked_modified = 0;
        foreach (@status) {
            $num_untracked++            if (/^\?\?/);
            $num_unstaged_but_tracked++ if (/^ M/);
            $num_staged++               if (/^[DA]/);
            $num_tracked_modified++     if (/^(?: M|[DA])/);
        }

        if ($num_tracked_modified) {
            if ($num_tracked_modified == 1) {
                print "$work_tree_rel -- 1 modified file exists, unable to merge\n";
            } else {
                print "$work_tree_rel -- $num_tracked_modified modified files exist, unable to merge\n";
            }
            return;
        }
    }

    # parse the .git/FETCH_HEAD file, to find out what the HEAD should be
    my @fetch_head = slurp(File::Spec->catfile($git_dir, 'FETCH_HEAD'));
    @fetch_head = map {chomp; $_} @fetch_head;
    @fetch_head = grep {!/  not-for-merge  /} @fetch_head;
    ### @fetch_head
    my ($merge_head, undef, $current_branch) = split(' ', $fetch_head[0]);
    $current_branch =~ s/^'(.*)'$/$1/s;
    ### $merge_head
    ### current_branch

    my $current_head = readpipe_args(qw[ git rev-parse HEAD ]);
    chomp $current_head;

    my $num_commits_before_merge = 0;
    my $num_commits_after_merge = 0;
    if ($current_head ne $merge_head) {
        if ($work_tree) {
            $num_commits_before_merge = readpipe_args(qw[ git rev-list --count HEAD ]);

            my $git_merge = readpipe_args("git", "--work-tree=$work_tree",
                                    qw[ merge --quiet HEAD ], $merge_head);

            # TODO: Check its output, and maybe report specific errors to the user at this point?

            $num_commits_after_merge = readpipe_args(qw[ git rev-list --count HEAD ]);
        } else {
            # see more at https://stackoverflow.com/a/4914298
            print "$work_tree_rel -- merges can't occur in a bare repo\n";
            return;
        }
    }

    my $num_fetched = $num_commits_after_fetch - $num_commits_before_fetch;
    my $num_merged = $num_commits_after_merge - $num_commits_before_merge;

    if ($num_fetched == 0 && $num_merged == 0) {
        print "$work_tree_rel -- already up to date\n";

    } elsif ($num_fetched = 0) {
        print "$work_tree_rel -- $num_merged commits merged\n";

    } elsif ($num_merged == 0) {
        print "$work_tree_rel -- $num_fetched commits fetched\n";

    } else {
        print "$work_tree_rel -- $num_fetched commits fetched and $num_merged commits merged\n";
    }
}




# Given something like ~/git/myrepo/.git/, return something like ~/git/myrepo/
# (but only if that's actually its working directory).
#
# Note that it may sometimes be impossible to locate the currect working tree,
# see https://stackoverflow.com/a/21085415
sub get_working_tree_from_git_dir {
    my ($git_dir) = @_;

    # Is this a bare repo?
    my $is_bare = readpipe_args(qw[ git config --get core.bare ]);
    if ($is_bare =~ /^true$/) {
        # there is no working tree
        return undef;
    }

    # Has the working tree been moved somewhere else with 
    # `git config core.worktree <directory>`?
    my $core_worktree = readpipe_args(qw[ git config --get core.worktree ]);
    if ($core_worktree =~ /\S/s) {
        chomp $core_worktree;
        return Cwd::realpath(File::Spec->rel2abs($core_worktree, $git_dir));
    }

    # At this point, we don't really know where the working tree is. But we can
    # make a wild-ass-guess.
    return Cwd::realpath(File::Spec->rel2abs(File::Spec->updir(), $git_dir));
}


sub is_git_dir {
    my ($dir) = @_;

    return(0) unless (-d $dir
                    && -d File::Spec->catfile($dir, 'objects')
                    && -f File::Spec->catfile($dir, 'HEAD'));

    chdir($dir);        # "git -C $dir" would work in Git v2.*, but we have lots of v1.* laying around
    my $is_inside_git_dir = readpipe_args(qw[ git rev-parse --is-inside-git-dir ]);

    return($is_inside_git_dir =~ /^true$/);
}





# like qx// or readpipe(), BUT it allows you to give explicitely delimited args, so you don't have to worry about escaping quotes
# see also   IPC::System::Simple                                                 
sub readpipe_args {my$p=open(my$f,'-|',@_)or die$!;my@o=<$f>;close$f;waitpid($p,0);wantarray?@o:join("",@o)}


# quickly read a whole file
# equivalent to File::Slurp or IO::All->slurp
sub slurp {my$p=open(my$f,"$_[0]")or die$!;my@o=<$f>;close$f;waitpid($p,0);wantarray?@o:join("",@o)}

