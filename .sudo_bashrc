# To have this file be loaded after sudoing to root, put this in root's ~/.bashrc:
#
#       # ========  load the original user's ~/.sudo_bashrc  ========
#       export STDIN_OWNERS_HOME=$(perl -e'print((getpwuid((stat shift)[4]))[7])' "$(tty)")
#       [ -f "$STDIN_OWNERS_HOME"/.sudo_bashrc ] && source "$STDIN_OWNERS_HOME"/.sudo_bashrc


if [ -z "$STDIN_OWNERS_HOME" ]; then
    # Allow ~/.sudo_bashrc to be 'source'd directly, without first setting $STDIN_OWNERS_HOME.
    # (or even just symlink it to /root/.bashrc!)
    THIS_SCRIPT=$(readlink -f "${BASH_SOURCE[0]}")
    export STDIN_OWNERS_HOME=$(perl -e'print((getpwuid((stat shift)[4]))[7])' "$THIS_SCRIPT")

    if [ -z "$STDIN_OWNERS_HOME" ]; then
        # Check the TTY owner
        export STDIN_OWNERS_HOME=$(perl -e'print((getpwuid((stat shift)[4]))[7])' "$(tty)")

        # Given a PID (process ID), find that process's parent PID.
        # Returns "0" when run on PID 1.
        function parent_PID() {
            awk '{print $4}' /proc/$1/stat
        }

        # Ubuntu now includes "Defaults use_pty" in its /etc/sudoers file.
        # This results in the $(tty) changing across the sudo boundary, and this makes it difficult
        # to track down the original tty.
        #
        # the sudo(8) manpage reads:
        #       If an I/O logging plugin is configured or if the security policy explicitly requests
        #       it, a new pseudo-terminal (“pty”) is allocated and fork(2) is used to create a
        #       second sudo process, referred to as the monitor. 
        #
        # So walk up the process tree, sequentially finding the parent process, and look for what
        # userid is associated with the process just before the sudo.
        CURRENT_PID=$$
        WILL_BE_JUST_AFTER_PROC=0
        while [ $CURRENT_PID -gt 1 ]
        do
            PROC_NAME=$(awk '{print $2}' /proc/$CURRENT_PID/stat)
            if [ "$PROC_NAME" = "(sudo)" ]; then
                WILL_BE_JUST_AFTER_PROC=1
            elif [ $WILL_BE_JUST_AFTER_PROC -gt 0 ]; then
                export STDIN_OWNERS_HOME=$(perl -e'print((getpwuid((stat shift)[4]))[7])' /proc/$CURRENT_PID)
                break
            fi
            CURRENT_PID=$(parent_PID $CURRENT_PID)
        done

        [ -z "$STDIN_OWNERS_HOME" ] && echo "ERROR -- \$STDIN_OWNERS_HOME is unset."
    fi
fi


######################################################
#### make various dotfiles work from root's $HOME ####
######################################################

# this is necessary for grc ($HOME/.config/grc/grc.cnf), and ...
export XDG_CONFIG_HOME=$STDIN_OWNERS_HOME/.config

export INPUTRC=$STDIN_OWNERS_HOME/.inputrc

export VIMINIT='let $MYVIMRC = "'$STDIN_OWNERS_HOME'/.sudo_vimrc" | source $MYVIMRC'

export LESSKEY=$STDIN_OWNERS_HOME/.less

export ACKRC=$STDIN_OWNERS_HOME/.ackrc

function perltidy { command perltidy --profile=$STDIN_OWNERS_HOME/.perltidyrc "$@"; }

# Use the correct ~/.gitconfig.
# May have serious side-effects:  https://github.com/DeeNewcum/dotfiles/issues/1
git() {
    HOME=$STDIN_OWNERS_HOME command git "$@"
}


############################################################
#### pull in specific ~/.bashrc settings we really need ####
############################################################

[[ "$(uname)" == "Linux" && "$(tty)" == "/dev/tty"* ]] && export IS_VIRTUAL_CONSOLE=1

[ -d $STDIN_OWNERS_HOME/bin ] && export PATH=$PATH:$STDIN_OWNERS_HOME/bin

PROMPT_HOSTNAME='\h'
[ -e $STDIN_OWNERS_HOME/.short_hostname_override ] && PROMPT_HOSTNAME="$(cat $STDIN_OWNERS_HOME/.short_hostname_override)"
XTERM_TITLE='\[\033]0;'$PROMPT_HOSTNAME'\007\]'
[ "$IS_VIRTUAL_CONSOLE" ] && XTERM_TITLE=''         # don't use the Xterm title when at the Linux Virtual Console
PS1=$XTERM_TITLE'\[\033[01;32m\]\u@'$PROMPT_HOSTNAME'\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\$ '

# custom-compiled apps that override the system ones
[ -d $STDIN_OWNERS_HOME/apps/bin/ ] && export PATH=$STDIN_OWNERS_HOME/apps/bin/:$PATH

set -o vi
type -p vim  >/dev/null && export EDITOR=vim
type -p less >/dev/null && export PAGER='less -i'

[ -f $STDIN_OWNERS_HOME/.bash_aliases ] && source $STDIN_OWNERS_HOME/.bash_aliases

export GIT_AUTHOR_NAME='Dee Newcum'
export GIT_AUTHOR_EMAIL='dee.newcum@gmail.com'
export GIT_COMMITTER_NAME=$GIT_AUTHOR_NAME GIT_COMMITTER_EMAIL=$GIT_AUTHOR_EMAIL

alias ls='ls --color=tty'

# set $LS_COLORS
type -p dircolors >/dev/null   &&   eval "$(dircolors)"

if [ $USER = "root" ]; then
    # take care when overwriting things, if root
    alias rm='rm -i'
    alias cp='cp -i'
    alias mv='mv -i'
fi

###################################################
################ GNU SCREEN  ######################
###################################################

# copied from https://brainscraps.fandom.com/wiki/Extreme_Multitasking_with_tmux_and_PuTTY

look_for_cmd=0
print_cmd() {
  if [ ${look_for_cmd} = 1 ] ;then
    if [ "${BASH_COMMAND}" != 'print_default' ] ;then
      if [ -z "$HISTTIMEFORMAT" ]; then
        cmdline=$(history 1 | xargs | cut -d\  -f2-)
      else
        cmdline=$(history 1 | xargs | cut -d\  -f5-)
      fi
      if [[ "${cmdline}" =~ ^(sudo|ssh|vi|vim|man|more|less)\  ]] ;then
        first=$(echo "${cmdline}" | awk '{print $1}')
        for i in ${cmdline} ;do
          if ! [[ "${i}" =~ ^-.*$ ]] && ! [[ "${i}" =~ ^${first}$ ]] ;then
            cmd="${first}[${i}]"
            break
          fi
        done
      elif [[ "${cmdline}" =~ ^[A-Z]*=.*$ ]] ;then
        cmd=$(echo ${cmdline} | awk '{print $2}')
      else
        cmd=$(echo ${cmdline} | awk '{print $1}')
      fi
      echo -ne "\033k${cmd}\033\\" 1>&2
      look_for_cmd=0
    else
      return
    fi
  fi

  # show the current directory in the hardstatus
  #echo -en '\033]0;'$PWD'/\007'
}

print_default() {
  echo -ne "\033kbash\033\\" 1>&2
  look_for_cmd=1
}

# are we running underneath GNU Screen?
if is_under_gnu_screen; then
    PROMPT_COMMAND='print_default'

    trap "print_cmd" DEBUG
fi
