# To have this file be loaded after sudoing to root, put this in root's ~/.bashrc:
#
#       # ========  load the original user's ~/.sudo_bashrc  ========
#       export STDIN_OWNERS_HOME=$(perl -e'print((getpwuid((stat shift)[4]))[7])' "$(tty)")
#       [ -f "$STDIN_OWNERS_HOME"/.sudo_bashrc ] && source "$STDIN_OWNERS_HOME"/.sudo_bashrc


# Allow this file to be 'source'd directly, without first setting $STDIN_OWNERS_HOME.
# (or even just symlink it to /root/.bashrc!)
if [ -z "$STDIN_OWNERS_HOME" ]; then
    THIS_SCRIPT=$(readlink -f "${BASH_SOURCE[0]}")
    export STDIN_OWNERS_HOME=$(perl -e'print((getpwuid((stat shift)[4]))[7])' "$THIS_SCRIPT")

    if [ -z "$STDIN_OWNERS_HOME" ]; then
        export STDIN_OWNERS_HOME=$(perl -e'print((getpwuid((stat shift)[4]))[7])' "$(tty)")

        # Ubuntu now includes "Defaults use_pty" in its /etc/sudoers file.
        # This results in the $(tty) changing across the sudo boundary, and this makes it difficult
        # to track down the original tty.
        #
        # the sudo(8) manpage reads:
        #       If an I/O logging plugin is configured or if the security policy explicitly requests
        #       it, a new pseudo-terminal (“pty”) is allocated and fork(2) is used to create a
        #       second sudo process, referred to as the monitor. 
        
        # TODO: try walking up the process tree, sequentially finding the parent process, and
        # checking to see what userid is associated with the process just before the sudo.
        #
        # https://stackoverflow.com/a/1525673/1042525
        #
        # try running one of these after sudoing:
        #       pstree -apus $$
        #       ps -fq "$(pstree -lps $$ | perl -0400 -ple 's/\D+/ /g; s/^\s+|\s+$//g')"

        [ -z "$STDIN_OWNERS_HOME" ] && echo "ERROR -- \$STDIN_OWNERS_HOME is unset."
    fi
fi


######################################################
#### make various dotfiles work from root's $HOME ####
######################################################

export INPUTRC=$STDIN_OWNERS_HOME/.inputrc

export VIMINIT='let $MYVIMRC = "'$STDIN_OWNERS_HOME'/.sudo_vimrc" | source $MYVIMRC'

export LESSKEY=$STDIN_OWNERS_HOME/.less

export ACKRC=$STDIN_OWNERS_HOME/.ackrc

function perltidy { command perltidy --profile=$STDIN_OWNERS_HOME/.perltidyrc "$@"; }

# Use the correct ~/.gitconfig.
# May have serious side-effects:  https://github.com/DeeNewcum/dotfiles/issues/1
git() {
    HOME=$STDIN_OWNERS_HOME command git "$@"
}


############################################################
#### pull in specific ~/.bashrc settings we really need ####
############################################################

[[ "$(uname)" == "Linux" && "$(tty)" == "/dev/tty"* ]] && export IS_VIRTUAL_CONSOLE=1

PROMPT_HOSTNAME='\h'
[ -e $STDIN_OWNERS_HOME/.short_hostname_override ] && PROMPT_HOSTNAME="$(cat $STDIN_OWNERS_HOME/.short_hostname_override)"
XTERM_TITLE='\[\033]0;'$PROMPT_HOSTNAME'\007\]'
[ "$IS_VIRTUAL_CONSOLE" ] && XTERM_TITLE=''         # don't use the Xterm title when at the Linux Virtual Console
PS1=$XTERM_TITLE'\[\033[01;32m\]\u@'$PROMPT_HOSTNAME'\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\$ '

[ -d $STDIN_OWNERS_HOME/bin ] && export PATH=$PATH:$STDIN_OWNERS_HOME/bin

# custom-compiled apps that override the system ones
[ -d $STDIN_OWNERS_HOME/apps/bin/ ] && export PATH=$STDIN_OWNERS_HOME/apps/bin/:$PATH

set -o vi
type -p vim  >/dev/null && export EDITOR=vim
type -p less >/dev/null && export PAGER='less -i'

[ -f $STDIN_OWNERS_HOME/.bash_aliases ] && source $STDIN_OWNERS_HOME/.bash_aliases

export GIT_AUTHOR_NAME='Dee Newcum'
export GIT_AUTHOR_EMAIL='dee.newcum@gmail.com'
export GIT_COMMITTER_NAME=$GIT_AUTHOR_NAME GIT_COMMITTER_EMAIL=$GIT_AUTHOR_EMAIL

alias ls='ls --color=tty'

# set $LS_COLORS
type -p dircolors >/dev/null   &&   eval "$(dircolors)"

if [ $USER = "root" ]; then
    # take care when overwriting things, if root
    alias rm='rm -i'
    alias cp='cp -i'
    alias mv='mv -i'
fi

